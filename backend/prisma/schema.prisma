generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  email     String    @unique
  password  String
  role      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  Invites   Invites[]

  Job Job[]
}

model Company {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  Job Job[]
}

model Candidate {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  telephone       String?
  age             Int?
  wageExpectation Decimal?
  wageActual      Decimal?
  lastCompany     String?
  seniority       String?
  gender          String?
  pcd             Boolean?

  country       String?
  state         String?
  city          String?
  neighbourhood String?

  begin                DateTime?
  alocation            String?
  travel               Boolean?
  availabilityOfChange Boolean?

  education String?
  skills    String[]
  languages String[]

  socials String?
  weblink String?
  cv      String?

  JobCandidate JobCandidate[]
  Interview    Interview[]

  restricted            Boolean?
  observation_blacklist String?
}

model Job {
  id          String   @id @default(uuid()) @db.Uuid
  title       String
  description String
  companyId   String   @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  skills        String[]
  education     String?
  languages     Json?
  pcd           Boolean
  country       String?
  state         String?
  city          String?
  neighbourhood String?
  alocation     String?
  travel        Boolean
  duration      String?
  quantity      Int
  jobOwner      String?
  priority      String?
  status        String?
  internalNotes String?
  salary        Float?
  createdBy     String   @db.Uuid
  creator       User     @relation(fields: [createdBy], references: [id])

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  JobCandidate JobCandidate[]
  Interview    Interview[]
}

model JobCandidate {
  jobId       String    @db.Uuid
  candidateId String    @db.Uuid
  appliedAt   DateTime  @default(now())
  status      String?
  interviewAt DateTime?

  job       Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@id([jobId, candidateId])
}

model Interview {
  id         String   @id @default(uuid()) @db.Uuid
  recruiter  String
  dateTime   DateTime
  notes      String?
  evaluation String?

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String    @db.Uuid

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invites {
  id            String   @id @default(uuid()) @db.Uuid
  status        String   @default("Pending")
  role          String
  token         String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  used          Boolean  @default(false)
  createdBy     String   @db.Uuid
  email         String
  createdByUser User     @relation(fields: [createdBy], references: [id])
}
